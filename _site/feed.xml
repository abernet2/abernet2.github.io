<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jack Abernethy&#39;s DBC Blog</title>
    <description>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</description>
    <link>http://abernet2.github.io/</link>
    <atom:link href="http://abernet2.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 16 Dec 2015 13:04:46 -0600</pubDate>
    <lastBuildDate>Wed, 16 Dec 2015 13:04:46 -0600</lastBuildDate>
    <generator>Jekyll v3.0.0</generator>
    
      <item>
        <title>How to Migrate to Jekyll</title>
        <description>&lt;h2&gt;A Quick Overview&lt;/h2&gt;
&lt;p&gt;Before we get started, let me just mention a few things. The first is that I will not go over how to install Jekyll onto your system. Jekyll comes in the form of a ruby gem, while that should make it easy, if you run into problems there should be ample resources to help you out.&lt;/p&gt;
&lt;p&gt;The second thing I wanna mention is that &lt;a href=&quot;http://jekyllrb.com/docs/quickstart/&quot;&gt;here&#39;s&lt;/a&gt; a quickstart guide that Jekyll provides. I&#39;m going to follow along with it (roughly) and basically just change steps for users with an existing site. You should also check out the site just to learn a little about jekyll, I will mention some broad overviews here, but the documentation is really quite good and I found it  helpful.&lt;/p&gt;
&lt;p&gt;Thirdly (and lastly), this is a bit of a hacky approach. Basically all you need to do to turn your site into a jekyll site is to add a _config.yml file and tell jekyll to build your site (the &lt;code&gt;jeykll build&lt;/code&gt; command). Of course there&#39;s other files that will help out, but since all valid html is compatible with Jekyll, that is the bare minimum to get started on your own.&lt;/p&gt;
&lt;h2&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;So at this point I&#39;m going to assume you have jekyll installed on your system. Jekyll is pretty straightforward to install on Mac/Linux, but I believe takes some serious work to get going on Windows. So if you&#39;re a windows user who doesn&#39;t have a linux VM, jekyll might not be for you.&lt;/p&gt;
&lt;p&gt;If you follow the jekyll tutorial, the first thing they are going to have you do is make a new site. We&#39;re going to make that site and then copy all of the files from the default blog into our github.io site. So follow the commands they give below:&lt;/p&gt;
&lt;img src=&quot;/imgs/quick-start.png&quot; alt=&quot;Quick Start&quot;&gt;
&lt;p&gt;Doing so should give you a directory whose contents look roughly like this:&lt;/p&gt;
&lt;img src=&quot;/imgs/myblog-contents.png&quot; alt=&quot;screenshot of content&quot;&gt;
&lt;h3&gt;What all those files do&lt;/h3&gt;
&lt;p&gt;When Jekyll builds a site it takes these files, scans through this whole file system and turns the code you&#39;ve written into valid HTML and CSS. Jekyll then puts these generated files into the &quot;_site&quot; folder. Whenever you type the command &lt;code&gt;jekyll build&lt;/code&gt; you are essentially telling jekyll to update the contents of that folder. When you see your site on github.io, that will be where jekyll gets the html files to display.&lt;/p&gt;
&lt;h4&gt;But how does it know how to do this?&lt;/h4&gt;
&lt;p&gt;The first step is Jekyll detecting your _config.yml file. This file is written in &lt;a href=&quot;http://www.wikiwand.com/en/YAML&quot;&gt;yaml&lt;/a&gt;, which is basically how Jekyll will store variables that you are going to use. Yaml is also how Jekyll will know that an html page needs to be processed. In order to tell Jekyll to process an html file is to include &lt;a href=&quot;http://jekyllrb.com/docs/frontmatter/&quot;&gt;Yaml Front matter&lt;/a&gt;. Much like the Yaml in the _config file, this is basically just your way of declaring basic variables. This helps to minimize the amount of rewriting you have to do, but there are also other features it helps with. For instance, if you want to put a list of your blog posts somewhere, in order, with a little description, using Jekyll you can write a for loop to add them to your page using the html tags and css styling of your choice. During that loop you can access yaml variables with the format: &quot;post.title&quot; or &quot;post.excerpt.&quot; Pretty cool right?&lt;/p&gt;
&lt;p&gt;Before I get any further into Jekyll&#39;s layout, let&#39;s move these files to your existing github.io site. When I migrated to Jekyll, I stored a branch with my non-jekyll site just in case. That might be something you want to do, although I neveer used it until writing this post! Here&#39;s my non-jekyll site before moving the files:&lt;/p&gt;
&lt;img src=&quot;/imgs/prejekyll.png&quot; alt=&quot;pre-jekyll files&quot;&gt;
&lt;p&gt;Now all I did was copy and paste the files from myblog into github.io. Note that you&#39;re likely to get a conflict over which index.html file to keep, I&#39;d recommend renaming the jekyll file so that you can keep it to learn from for a little while. Here&#39;s what mine looks like:&lt;/p&gt;
&lt;img src=&quot;/imgs/post-jekyll.png&quot; alt=&quot;&quot;&gt;
&lt;p&gt;Now open a terminal in this directory and type &lt;code&gt;jekyll build&lt;/code&gt; then &lt;code&gt;jekyll serve&lt;/code&gt;. Now open a browser and go to localhost:4000. If the index.html file is from your original site, you should see your site as it stands. If the index.html file is the default from jekyll, you should see that. At any rate, if you treat localhost as your baseurl, you should be able to find all the different parts of your site by adding &quot;/blogpost.html&quot; or whatever you want.&lt;/p&gt;
&lt;h2&gt;Changing your Existing HTML to Fit Jekyll&lt;/h2&gt;
&lt;p&gt;Let&#39;s take a look real quick at the contents of Jekyll&#39;s default index.html file. If you deleted yours that&#39;s alright I&#39;ll provide mine.&lt;/p&gt;
&lt;img src=&quot;/imgs/jekyll-index.png&quot; alt=&quot;&quot;&gt;
&lt;p&gt;As you can see, this probably looks nothing like your index.html file. For one there&#39;s no html declaration, no links to stylesheets and very little html in general. You&#39;ll also notice a couple of curly bracket notations. This is the markup of the &lt;a href=&quot;https://docs.shopify.com/themes/liquid-documentation/basics&quot;&gt;Liquid Templating language&lt;/a&gt;. Liquid consists of tags, objects and filters, feel free to take a second to look over the examples liquid provides. Liquid is how we are going to access variables we declared in yaml and also how we&#39;ll do things like loop over blog posts and imgs.&lt;/p&gt;
&lt;p&gt;Now going over Github&#39;s example, the first thing you&#39;ll notice is at the top of the page you&#39;ll see &quot;layout: defualt&quot; with three dashes above and below. This is yaml frontmatter for the index site, and all it is doing is specifying the layout for your page, which it then takes from the _layouts folder. If you navigate to that folder to see what the default layout looks like you&#39;ll see something like this:&lt;/p&gt;
&lt;img src=&quot;/imgs/default-layout.png&quot; alt=&quot;default layout pic&quot;&gt;
&lt;p&gt;If you&#39;re still confused don&#39;t worry. Basically all that is happening here is basic DRY, don&#39;t repeat yourself. Instead of copying and pasting the head file, your header, your footer or anything else you need, Jekyll takes them from the _includes folder. So right now we&#39;re basically going to chop up your index.html into different parts and put them into the _includes folder. Keep in mind that this will be used to generate an html file, so whenever you include something you tell jekyll to copy and paste it for you.&lt;/p&gt;
&lt;p&gt;One thing to note is that this is important whenever you need to know about relative paths. Say there is an image in your header, it will likely not load properly on many pages of your site. To fix this, define the url of your site in the config.yml file and then prepend it to any relative path you use like so: &lt;code&gt;{ site.url }}&quot;/imgs/imgname.jpeg&quot;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Once you&#39;ve done this, you should be able to go through your existing files and retrofit your html to fit with your new jekyll setup. Although you should remember it&#39;s not necessary, since the html will still work. The advantage is that if you wanted to redo your header, for instance, you could edit the html once and change it on every page. It&#39;s up to you!&lt;/p&gt;
&lt;h3&gt;Closing Remarks&lt;/h3&gt;
&lt;p&gt;Wrapping up about the files in the jekyll directory, you&#39;ll notice I haven&#39;t talked about _sass and _posts.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://sass-lang.com/&quot;&gt;Sass is basically an upgraded version of css&lt;/a&gt;. Sass lets you define variables, which is great for using colors on your site. It also lets you nest your styling in a way that mirrors more object-oriented styling and also the layout of your html. It has a bunch of other cool features you can check out, such as the ability to add and subtract values from colors (shading and tinting). Once you write sass, it then parses your code and turns it into css. Sass files come with the .sass extension, but you&#39;ll notice all the files in _sass come with the .scss extension. The difference is entirely cosmetic, just whether you want to require curly brackets or not. &lt;/p&gt;
&lt;p&gt;With sass you can also chop up your style sheet into different files, which is what jekyll does by default. The css folder holds the main .scss file which gets translated to .css in the _site folder. The files in the _sass folder are all linked to this main file, which really helps with readability. I personally have not moved my css to sass, but it&#39;s something I&#39;d like to do in the future.&lt;/p&gt;
&lt;p&gt;Hopefulyl this post is enough to get you to a point where you can use Jekyll&#39;s resources to help you. You can learn about the posts folder &lt;a href=&quot;http://jekyllrb.com/docs/posts/&quot;&gt;here&lt;/a&gt;, hopefully it can help you on your site!&lt;/p&gt;

</description>
        <pubDate>Wed, 16 Dec 2015 00:00:00 -0600</pubDate>
        <link>http://abernet2.github.io/2015/12/16/jekyll.html</link>
        <guid isPermaLink="true">http://abernet2.github.io/2015/12/16/jekyll.html</guid>
        
        
      </item>
    
      <item>
        <title>Computer Memory</title>
        <description>&lt;h2 id=&quot;starting-out-a-broad-overview&quot;&gt;Starting Out: A Broad Overview&lt;/h2&gt;

&lt;p&gt;A computer works a lot like a person. For the purposes of discussing memory, it has a brain that is very powerful, but only has a tiny amount of room to remember things it needs to focus on. To put it another way, a human might be smart enough to do long division or calculus, but it can be extremely taxing to do so in one’s head. That’s why when you do math you usually use scratch paper.&lt;/p&gt;

&lt;p&gt;Computers work the same way: they need scratch paper. The CPU, and other pieces of hardware, have small bits of working memory that help them to do their work quickly and efficiently. These small bits of memory in layers of memory called caches.&lt;/p&gt;

&lt;p&gt;Caching is a broad term that is important for performance. Every computer has layers of caches between the hardrive and various features of RAM. They come in various sizes with various ease of access. For the purpose of this blog post, just think of cache as the memory in the CPU, but keep in mind there is more to the term!&lt;/p&gt;

&lt;p&gt;There is also the third layer of memory, the harddrive. RAM is downright puny compared to the harddrive. Whereas caches and RAM disappear without power, the hard-drive remembers what you write to it without any power. It also can store much more data in much less space, although these advantages come at a huge speed disadvantage. That’s why harddrives are often compared to file cabinets: they are slow and painful to use, but great for big, longterm storage.&lt;/p&gt;

&lt;p&gt;Each layer of memory serves a distinct purpose. It would be frustrating to constantly have to go in and out of a file cabinent to do a math problem. Likewise it would be very difficult after a while to sort through the big stack of your old pieces of scratch paper for any meaningful data.&lt;/p&gt;

&lt;h2 id=&quot;stacks&quot;&gt;Stacks&lt;/h2&gt;

&lt;p&gt;Stack is a word you’ll hear a lot in conversations about computers. There’s “Stack” Overflow, Full “Stack” Employees, Kernel Stacks, etc. You might be interested to learn that this is simply a basic data type in computer science and it is based (essentially) off a stack of papers on your desk.&lt;/p&gt;

&lt;p&gt;A stack works like a stack of papers on your desk. When you add a paper to the top, we call that a &lt;em&gt;push&lt;/em&gt; and when you take a paper off the top we call that a &lt;em&gt;pop&lt;/em&gt;. Imagine you have 10 pieces of paper with a letter on each one, A-J. Now imagine pushing all 10 pieces to the stack. Now pop the top page off and try to guess what letter it is? The correct answer is the last paper you added, if you went in order that would be J. Pushing items in order reverses the order. This is what is meant by Last In First Out (LIFO), a common phrase associated with stacks.&lt;/p&gt;

&lt;p&gt;Stacking prioritizes the most recent additions. Notice that if you want something in the middle of the stack, this is a pretty inconvenient way of storing stuff. In the case of computers executing complicated sets of instructions, this is actually really helpful.&lt;/p&gt;

&lt;p&gt;Computers are always using stacks. If you hit alt-tab on windows, you can scroll through your most recently used programs, with the most recent first. This is most likely the result of some sort of stack. The back and forward buttons on your browser use a stack, pushd and popd on the command line use a stack and every program you write uses a stack to manage its memory.&lt;/p&gt;

&lt;h3 id=&quot;cool-tell-me-more-about-memory&quot;&gt;Cool, Tell Me More About Memory!&lt;/h3&gt;

&lt;p&gt;Computers are dumb, which is why we need to be smart and help them stay organized. Stacks are a great way for computers to organize their memory because it keeps recent accesses in close reach. You can also make efficient use of space since when you pop something off the stack you free that memory back up.&lt;/p&gt;

&lt;p&gt;Every time you write a program, the computer gives you a piece of scratch paper in the form of a stack. Every variable you declare gets pushed to the stack, although Objects behave a little differently than primitive types (more on that in a little bit).&lt;/p&gt;

&lt;p&gt;Every time you call a method, the computer gives you a new little sub-stack so that method can have its own scoped scratch paper. This process allows scoping and keeps memory manageable. Every time you call a method, it makes a new little piece of scratch paper, when the method finishes it throws that scratch away to keep your stack clean.&lt;/p&gt;

&lt;h3 id=&quot;you-said-something-about-objects-being-different-than-primitive-types&quot;&gt;You said something about Objects Being Different than Primitive Types&lt;/h3&gt;

&lt;p&gt;Stacks have their place in the world, but not all data is stored in that way. Arrays, hashes, and other types of objects are  often referred to as &lt;em&gt;Dynamic Variables&lt;/em&gt;. Dynamic Variables get their “dynamism” from being stored in something called the &lt;em&gt;Heap&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;While stacks are fast and manage memory well, they have a limited amount of space to work with. This is a tradeoff you make in order to use the organizational structure of a stack.&lt;/p&gt;

&lt;p&gt;Remember that everything stored on a computer has a specific memory address, usually shown in hexadecimal notation (0x08FAD…). Whenever you deal with an object you have to call it by its address. If you wanted to insert something sequentially between two addresses in memory, you would have to move literally every memory address that follows after to achieve that result. It would be like trying to add a lot to a highly developed city block. The Heap has features that make dynamically changing the size of variables possible.&lt;/p&gt;

&lt;h2 id=&quot;the-heap&quot;&gt;THE HEAP&lt;/h2&gt;

&lt;p&gt;Heaps can do this because they are allowed to ask the operating system for more memory. Stacks cannot do this because the stack is always growing and retracting, you have to limit its size when you make it to avoid having to move huge chunks of memory.Since every program gets its own stack, it’s not completely off base to think of memory as just a bunch of stacks of stacks. If you made every stack gigantic, you would very quickly run out of space in RAM and your computer would run a lot slower. So the size of the stack is about balancing these two colliding issues.&lt;/p&gt;

&lt;p&gt;The Heap gets around this issue by not caring about sequencing. If you choose to double the size of an array, for example, the Heap will actually move it to a spot where there is plenty of memory and free up where the array used to be.&lt;/p&gt;

&lt;p&gt;Basically any time you use the ‘new’ keyword in any language, you are allocating something to the heap. Unlike the stack, memory allocated to the heap is &lt;strong&gt;NOT&lt;/strong&gt; automatically deleted. In high level languages such as Ruby, Python and Java, this fact is concealed from the program because those languages have a garbage collector. A garbage collector keeps track of all your heap allocations and deletes them automatically. In lower level languages like C/C++ this has to be done manually, which saves in computation time, but can cause errors if programmers forget to free their variables.&lt;/p&gt;

&lt;p&gt;Further it can cause memory to become fragmented. Whereas a stack deletes everything in sequential chunks, the Heap may have to go to many different address to delete all of your objects. Since the Heap keeps track of free memory, if you have many random deletions you have a bunch of tiny free spots in your memory.&lt;/p&gt;

&lt;h3 id=&quot;cache-hits-pointers-and-examples&quot;&gt;Cache Hits, Pointers and Examples&lt;/h3&gt;

&lt;p&gt;CPUs at their lowest level can basically only save, store, add and subtract. The process of saving and storing requires basically three arguments: from_where, to_where and how_much. Since a CPU can only load in specific chunk sizes, it helps to have all your data stored in a row.&lt;/p&gt;

&lt;h4 id=&quot;quick-example-of-a-stack-call&quot;&gt;Quick Example of a Stack Call&lt;/h4&gt;

&lt;p&gt;Say you have ints for height and width, and lets say they each take up 8 bytes. Keep in mind I’m completely making up these numbers, but now let’s say the CPU loads 32 bytes at a time. When the CPU loads height it gets 8 bytes it wants and 24 it doesn’t, but it still has all 32 bytes stored in its cache.&lt;/p&gt;

&lt;p&gt;Now if you go to load width (and they were declared and stored near each other), the CPU can see that it already has those 8 bytes and it doesn’t actually need to load anything off the stack.&lt;/p&gt;

&lt;p&gt;Integers in many languages (not Ruby) will be stored on the stack. Since they are relatively small, other variables often get loaded with them. If you happen to be using something in that pack of memory, you get a speed up from the system, this is called a cache hit. Further, the system remembers how big an int is and so you don’t have store its size anywhere, just a little bit of code indicating its type.&lt;/p&gt;

&lt;h4 id=&quot;a-quick-example-of-a-heap-call&quot;&gt;A Quick Example of a Heap Call&lt;/h4&gt;

&lt;p&gt;Variables stored on the heap are a different story. Basically the CPU starts out the same way as it would load an int: it gets a memory address and a length to load off the stack.&lt;/p&gt;

&lt;p&gt;The difference is that with the int we were loading that variable’s value: some number. With dynamically located variables (stuff on the heap), the values we load here are for ANOTHER SET OF INSTRUCTIONS FOR A LOAD.&lt;/p&gt;

&lt;p&gt;This is called a pointer, and if you ever have any interest in doing system’s programming you will be using them explicitly a lot. Pointers are how programs interact with the Heap and also how the system interacts with hardware. Hence the systems programming comment.&lt;/p&gt;

&lt;p&gt;Loading from pointers basically means the system has at least 1 extra load to perform, although it can also be quite a few more if you are loading something big.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Most modern languages have features that prevent programmers from interacting directly with this complicated process. Which can be a great thing since there are a lot of tough to detect errors that can occure from working with pointers directly. Still it’s important to understand if you ever have performance concerns.&lt;/p&gt;

&lt;h2 id=&quot;references-and-what-i-read&quot;&gt;References and What I Read&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.learncpp.com/cpp-tutorial/79-the-stack-and-the-heap/&quot;&gt;Stack and Heap overview from LearnCpp.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.learncpp.com/cpp-tutorial/79-the-stack-and-the-heap/&quot;&gt;Stack vs Heap from C Bootcamp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.programmerinterview.com/index.php/data-structures/difference-between-stack-and-heap/&quot;&gt;Stack vs Heap Interview Questions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/79923/what-and-where-are-the-stack-and-heap&quot;&gt;This great Stack Overflow Post&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://duartes.org/gustavo/blog/post/anatomy-of-a-program-in-memory/&quot;&gt;Anatomy of a Program in Memory by Gustavo Duarte&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://homepage.cs.uri.edu/faculty/wolfe/book/Readings/Reading04.htm&quot;&gt;How Computers Work: The CPU and Memory&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://computer.howstuffworks.com/computer-memory.htm&quot;&gt;How Computer Memory Works&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 13 Dec 2015 00:00:00 -0600</pubDate>
        <link>http://abernet2.github.io/2015/12/13/memory.html</link>
        <guid isPermaLink="true">http://abernet2.github.io/2015/12/13/memory.html</guid>
        
        
      </item>
    
      <item>
        <title>Ruby vs Javascript</title>
        <description>&lt;main&gt;
	&lt;div class=&quot;container&quot;&gt;
		&lt;h4&gt;December 03, 2015&lt;/h4&gt;
		&lt;div id=&quot;blog-text&quot;&gt;
			&lt;article class=&quot;post&quot;&gt;
			   &lt;p id=&quot;intro-blurb&quot;&gt;One of the biggest advantages of Ruby, and for many its defining feature, is its ability to easily iterate over objects. It accomplishes this feat by coming pre-packaged with all sorts of easy to use and intuitive methods for manipulate arrays, hashes and other types of data.&lt;/p&gt;
            &lt;h2&gt;Iterating over Hashes/Objects&lt;/h2&gt;
            &lt;p&gt;While Javascript maintains the ability to perform most of these functions, it can&#39;t do so with the same level of readability. For example, the good ol&#39; #each loop in ruby looks roughly like this:&lt;/p&gt;
            &lt;pre class=&quot;prettyprint lang-rb&quot;&gt;
hash = {a; 1,b: 2,c: 3,d: 4}
sum = 0
hash.each do |key, value|
   sum += value
end
            &lt;/pre&gt;
            &lt;p&gt;And as long as we&#39;re working with hashes (objects in Javascript) the each loop should look pretty similar:&lt;/p&gt;
            &lt;pre class=&quot;prettyprint lang-js&quot;&gt;
var hash = {a; 1,b: 2,c: 3,d: 4};
var sum = 0;
for each (value in hash) {
   sum += value;
}
            &lt;/pre&gt;  
            &lt;h2&gt;Iterating over Arrays&lt;/h2&gt;
            &lt;p&gt;But the real problems start showing up when we need to iterate over an array. Javascript does not support easy iteration over arrays with the for each loop. To get such functionality you can use this somewhat messy workaround:&lt;/p&gt;
            &lt;pre class=&quot;prettyprint lang-js&quot;&gt;
var arr = [1,2,3,4];
var sum = 0;
arr.forEach( function(num) {
   sum += num;
});
            &lt;/pre&gt;
            &lt;p&gt;Notice how this creates a strange nested }); at the end of the loop. The syntax is also inconsistent with the for each loop used for objects. A main reason for using each statements is that it makes the code so much more readable. Notice that to read this new syntax you have to put in extra work. If you didn&#39;t know any better, it would look like you were iterating over an array of functions, and where did this num variable come from!? &lt;/p&gt;
            &lt;p&gt;The better way to iterate over an array is like so:&lt;/p&gt;
            &lt;pre class=&quot;prettyprint lang-js&quot;&gt;
var arr = [1,2,3,4];
var sum = 0;
for (var i = 0; i &lt; arr.length; i++) {
   sum += arr[i];
}
            &lt;/pre&gt;
            &lt;p&gt;While this might not look much better, if you step through the code it makes much more sense. First you declare i (traditionally used as an index in for loops). While i &lt; length, you do the following function and then increment by 1. It may not be pretty, but it gets the job done!&lt;/p&gt;
            &lt;h2&gt;Other Javascript Iteration Methods&lt;/h2&gt;
            &lt;p&gt;None of this is to say that Javascript is completely without builtin methods, they are just much more limited and much more verbose. Here&#39;s a quick list of other Enumerable-&lt;i&gt;ish&lt;/i&gt; methods in Javascript:&lt;/p&gt;
            &lt;ul&gt;
               &lt;li&gt;&lt;b&gt;#reduce&lt;/b&gt;: &amp;nbsp; acts like an accumulator, great for summing/flattening arrays&lt;/li&gt;
               &lt;li&gt;&lt;b&gt;#includes&lt;/b&gt;: &amp;nbsp; Checks if an array/object &lt;i&gt;includes&lt;/i&gt; the argument&lt;/li&gt;
               &lt;li&gt;&lt;b&gt;#map&lt;/b&gt;: &amp;nbsp; Like map in Ruby, performs a function on every object and returns a new array.&lt;/li&gt;
               &lt;li&gt;&lt;b&gt;#reverse&lt;/b&gt;: &amp;nbsp; Reverses the object/array you call this on&lt;/li&gt;
               &lt;li&gt;&lt;b&gt;#sort&lt;/b&gt;: &amp;nbsp; Sorts stuff!&lt;/li&gt;
               &lt;li&gt;&lt;b&gt;#every&lt;/b&gt;: &amp;nbsp; Checks if every element passes a certain condition&lt;/li&gt;
            &lt;/ul&gt;
			&lt;/article&gt;
		&lt;/div&gt;
	&lt;/div&gt;
&lt;/main&gt;</description>
        <pubDate>Thu, 03 Dec 2015 00:00:00 -0600</pubDate>
        <link>http://abernet2.github.io/technical/blog/2015/12/03/ruby-vs-javascript.html</link>
        <guid isPermaLink="true">http://abernet2.github.io/technical/blog/2015/12/03/ruby-vs-javascript.html</guid>
        
        
        <category>Technical</category>
        
        <category>Blog</category>
        
      </item>
    
      <item>
        <title>Ruby Classes</title>
        <description>&lt;main&gt;
   &lt;div class=&quot;container&quot;&gt;
      &lt;h4 id=&quot;date&quot;&gt;11.30.2015&lt;/h4&gt; 
      &lt;div id=&quot;blog-text&quot;&gt;
         &lt;article class=&quot;post&quot;&gt;
            &lt;p id=&quot;intro-blurb&quot;&gt;
            Classes are basically blueprints for ruby objects. Classes can be useful to store and manipulate data in a consistent and predictable way. In this example, I create a class to consistently manipulate data about the sides of Quadrilaterals to figure out what kind of Quadrilateral they are.&lt;/p&gt;
            &lt;p&gt;To begin, real quick, here&#39;s an overview of the class I made. We&#39;re going to refactor this for better use of instance/local variables, but for now here&#39;s a straightforward approach:&lt;/p&gt;
&lt;pre class=prettyprint&gt;

class Quadrilateral

   def initialize(side1, side2, side3, side4, right_angle=false)
      @s1 = side1
      @s2 = side2
      @s3 = side3
      @s4 = side4
      @ra = right_angle
   end

   def parrellelogram?
         @s1 == @s3 &amp;&amp; @s2 == @s4
   end

   def rhombus?
      @s2 == @s3 &amp;&amp; parrellelogram?
   end

   def kite?
      @s1 == @s2 &amp;&amp; @s3 == @s4
   end

   def rectangle?
      @ra &amp;&amp; parrellelogram?
   end

   def square?
      @ra &amp;&amp; rhombus?
   end

end
               &lt;/pre&gt;

            &lt;p&gt;Basically what this object does is take in four sides, in consecutive order, and figures out which subset of a quadrangle it could be. It needs to remember the lengths of these sides so it can compare them later, which is why we create member variables for each.&lt;/p&gt;
            &lt;p&gt;The upside of using local variables is that you if you perform some computation with them upfront, you can save on space and time later. With this specific class, you can see that there is some overlap between our methods and we have a quite a few repetitive method calls.&lt;/p&gt;
            &lt;p&gt;Below I created a new method that makes better use of local variables by not saving the sides:&lt;/p&gt;
            &lt;pre class=prettyprint&gt;

class Quadrilateral
   
   attr_reader :parrellelogram, :kite

   def initialize(side1, side2, side3, side4, right_angle=false)
      @parrellelogram = side1 == side3 &amp;&amp; side2 == side4
      @kite = side1 == side2 &amp;&amp; side3 == side4
      @ra = right_angle
   end

   def rhombus
      @kite &amp;&amp; @parrellelogram
   end

   def rectangle
      @ra &amp;&amp; @parrellelogram
   end

   def square
      @ra &amp;&amp; rhombus
   end

end
            &lt;/pre&gt;

            &lt;p&gt;What this does is computes all the important compares upfront and remembers the result, rather than remembering the sides and repeatedly computing them. This not only saves on memory, since now we only have 3 vs 5 variables, but it should also save on time and is a shorter amount of code.&lt;/p&gt;
            &lt;p&gt;The downside to this approach, however, is that it could prove problematic in the future. For instance, what if I wanted to create a method that returns the perimeter or area of a particular quadrilateral? In that situation, it might be best to go with the original approach. Or what if we want to resize our quadrilateral or morph it into another quadrilateral?&lt;/p&gt;
            &lt;p&gt;These questions bring out the important distinction between these variables. Local variables get forgotten pretty quickly, which can be mighty useful. The art of choosing between these two is the art of lettting that which truly does not matter slide. That art requires understanding how this class will be used and what changes might need to be made in the future.&lt;/p&gt;
         &lt;/article&gt;
      &lt;/div&gt;
   &lt;/div&gt;
&lt;/main&gt;
&lt;aside id=&quot;about-me&quot;&gt;
 &lt;div class=&quot;container&quot;&gt;
    &lt;figure id=&quot;me&quot;&gt;
      &lt;img src=&quot;/imgs/me.png&quot; alt=&quot;me&quot;&gt;
      &lt;h4&gt;Jack Abernethy&lt;/h4&gt;
    &lt;/figure&gt;
      &lt;ul id=&quot;links&quot;&gt;
        &lt;li&gt;&lt;p style=&quot;color:#e0e7e2&quot;&gt;My name is Jack and I&#39;m a fledgling Web Developer currently enrolled at Dev Bootcamp!&lt;/p&gt;&lt;/li&gt;
        &lt;li&gt;&lt;ul class=&quot;social-media&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/jabber_26&quot;&gt;&lt;img class=&quot;twitter&quot; src=&quot;/imgs/Twitter_white_logo.svg&quot; onmouseover=&quot;this.src=&#39;/imgs/Twitter_blue_logo.svg&#39;&quot; onmouseout=&quot;this.src=&#39;/imgs/Twitter_white_logo.svg&#39;&quot; alt=&quot;twitter&quot;&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/abernet2&quot;&gt;&lt;img src=&quot;/imgs/GitHub-Mark-Light.svg&quot; onmouseover=&quot;src=&#39;/imgs/GitHub-Mark.svg&#39;&quot; onmouseout=&quot;src=&#39;/imgs/GitHub-Mark-Light.svg&#39;&quot;&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@jackabernethy&quot;&gt;&lt;img src=&quot;/imgs/Medium-light.png&quot; onmouseover=&quot;src=&#39;/imgs/medium-m-color.png&#39;&quot; onmouseout=&quot;src=&#39;/imgs/medium-light.png&#39;&quot; alt=&quot;Medium&quot;&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.linkedin.com/in/jack-abernethy-ab257b9b&quot;&gt;&lt;img src=&quot;/imgs/In-White-34px-TM.png&quot; onmouseover=&quot;src=&#39;/imgs/In-2C-34px-R.png&#39;&quot; onmouseout=&quot;src=&#39;/imgs/In-White-34px-TM.png&#39;&quot;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
      &lt;/ul&gt;
 &lt;/div&gt;
&lt;/aside&gt;



</description>
        <pubDate>Mon, 30 Nov 2015 00:00:00 -0600</pubDate>
        <link>http://abernet2.github.io/2015/11/30/ruby-classes.html</link>
        <guid isPermaLink="true">http://abernet2.github.io/2015/11/30/ruby-classes.html</guid>
        
        
      </item>
    
      <item>
        <title>Enumerable Methods</title>
        <description>&lt;main&gt;
	&lt;div class=&quot;container&quot;&gt;
		&lt;h4 id=&quot;date&quot;&gt;11.20.2015&lt;/h4&gt;	
		&lt;div id=&quot;blog-text&quot;&gt;
			&lt;article class=&quot;post&quot;&gt;
				&lt;h2&gt;Enumerable#map&lt;/h2&gt;
				&lt;p&gt;One of the most basic ways to use an enumerable is to simlpy apply an operation to each element. Say you had an array of ints and you wanted to double all of them, #Map would be a great function to help with that!&lt;/p&gt;
				&lt;p&gt;Map works by applying a block of code to each element that is enumerated over and then putting it in an array to return. It&#39;s important to know that no matter what you call Map on, it always returns an array. This is what makes map great! If you were to do the same operation with each, you would have to declare a new array and push every operated element in.&lt;/p&gt;
				&lt;p&gt;An alternative way to use map is to pass in the symbol for a method name. If you&#39;re not familiar, all the names of your methods have a symbol associated with them. For instance:&lt;pre class=&quot;prettyprint lang-rb&quot;&gt;def sum&lt;/pre&gt; would be &lt;pre class=&quot;prettyprint lang-rb&quot;&gt;:sum&lt;/pre&gt;&lt;/p&gt;
				&lt;h2&gt;Enumerable#group_by&lt;/h2&gt;
				&lt;p&gt;Where the #map function always returns an array, #group_by always returns a hash. To use #group_by you need to understand that it will turn each element of your enumerable into a VALUE. That means that the block of code that you pass into #group_by calculates the KEY that each element will be hashed to.&lt;/p&gt;
				&lt;p&gt;This confused me at first, but then I thought about it and it made sense. If you had an array of values and you wanted to hash each of them as a key to a new value, basically anything you could calculate in an enumerator would be redundant. The example given in our book is &lt;pre class=&quot;prettyprint lang-rb&quot;&gt;colors.group_by {|color| color.size}&lt;/pre&gt;
				If you wanted to do the inverse (map color =&gt; size), I would ask why do you need to hash? All you need to do to access the color&#39;s size is to literally code color.size.&lt;/p&gt;

				&lt;h2&gt;Enumerable#cycle&lt;/h2&gt;
				&lt;p&gt;The #cycle function works basically the same way as .times, just for enumerables. Basically, if you call the cycle function it will &quot;cycle&quot; through your elements as many times as you tell it to.&lt;/p&gt;
				&lt;h2&gt;Enumerable#zip&lt;/h2&gt;
				&lt;p&gt;For my last piece, I chose a function I&#39;d never heard of: zip. Zip is a little bit tricky, but basically it merges its arguments into arrays with each other. Some of the behavior gets weird unless you understand how it works.&lt;/p&gt;
				&lt;figure class=&quot;block&quot;&gt;
					&lt;img src=&quot;/imgs/zip.PNG&quot; alt=&quot;demo from ruby docs&quot;&gt;
				&lt;/figure&gt;
				&lt;p&gt;As seen above, if you zip two arrays together you get an array of arrays paired by index. So &lt;pre class=&quot;prettyprint lang-rb&quot;&gt;c[0] = [a[0], b[0]]&lt;/pre&gt; Notice this is the transpose of creating a 2d array by saying &lt;pre class=&quot;prettyprint lang-rb&quot;&gt;c = [a,b]&lt;/pre&gt;&lt;/p&gt;
				&lt;p&gt;But what if your arrays are different sizes? You have to remember that since it is an enumerable, it iterates over each element of the object that CALLS it. So you will never get a shorter or longer array as a result. It will fill in empty spaces with nil or disregard extra values, so use wisely!&lt;/p&gt;
				&lt;h2&gt;In Conclusion...&lt;/h2&gt;
				&lt;p&gt;Enumerables are at the heart of what separates Ruby from other languages and they are really a big part of what makes Ruby, Ruby. There&#39;s a lot more methods out there, but I hope these are a little bit clearer now!&lt;/p&gt;
			&lt;/article&gt;
		&lt;/div&gt;
	&lt;/div&gt;
&lt;/main&gt;
&lt;aside id=&quot;about-me&quot;&gt;
 &lt;div class=&quot;container&quot;&gt;
    &lt;figure id=&quot;me&quot;&gt;
      &lt;img src=&quot;/imgs/me.png&quot; alt=&quot;me&quot;&gt;
      &lt;h4&gt;Jack Abernethy&lt;/h4&gt;
    &lt;/figure&gt;
      &lt;ul id=&quot;links&quot;&gt;
        &lt;li&gt;&lt;p style=&quot;color:#e0e7e2&quot;&gt;My name is Jack and I&#39;m a fledgling Web Developer currently enrolled at Dev Bootcamp!&lt;/p&gt;&lt;/li&gt;
        &lt;li&gt;&lt;ul class=&quot;social-media&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/jabber_26&quot;&gt;&lt;img class=&quot;twitter&quot; src=&quot;/imgs/Twitter_white_logo.svg&quot; onmouseover=&quot;this.src=&#39;/imgs/Twitter_blue_logo.svg&#39;&quot; onmouseout=&quot;this.src=&#39;/imgs/Twitter_white_logo.svg&#39;&quot; alt=&quot;twitter&quot;&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/abernet2&quot;&gt;&lt;img src=&quot;/imgs/GitHub-Mark-Light.svg&quot; onmouseover=&quot;src=&#39;/imgs/GitHub-Mark.svg&#39;&quot; onmouseout=&quot;src=&#39;/imgs/GitHub-Mark-Light.svg&#39;&quot;&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@jackabernethy&quot;&gt;&lt;img src=&quot;/imgs/Medium-light.png&quot; onmouseover=&quot;src=&#39;/imgs/medium-m-color.png&#39;&quot; onmouseout=&quot;src=&#39;/imgs/medium-light.png&#39;&quot; alt=&quot;Medium&quot;&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.linkedin.com/in/jack-abernethy-ab257b9b&quot;&gt;&lt;img src=&quot;/imgs/In-White-34px-TM.png&quot; onmouseover=&quot;src=&#39;/imgs/In-2C-34px-R.png&#39;&quot; onmouseout=&quot;src=&#39;/imgs/In-White-34px-TM.png&#39;&quot;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
      &lt;/ul&gt;
 &lt;/div&gt;
&lt;/aside&gt;
	

</description>
        <pubDate>Fri, 20 Nov 2015 00:00:00 -0600</pubDate>
        <link>http://abernet2.github.io/2015/11/20/enumerable-methods.html</link>
        <guid isPermaLink="true">http://abernet2.github.io/2015/11/20/enumerable-methods.html</guid>
        
        
      </item>
    
      <item>
        <title>Arrays and Hashes!</title>
        <description>	&lt;main&gt;
		&lt;div class=&quot;container&quot;&gt;
			&lt;h4 id=&quot;date&quot;&gt;11.13.2015&lt;/h4&gt;	
			&lt;div id=&quot;blog-text&quot;&gt;
				&lt;article class=&quot;post&quot;&gt;
					&lt;p id=&quot;intro-blurb&quot;&gt;All variables in programming are stored in blocks of memory. Computers might seem like magic most of the time, but they are manifested in physical space just like everything else. So let&#39;s breakdown how computers &quot;magically&quot; store arrays and hashes in their physical memory.&lt;/p&gt;
					&lt;h2&gt;All about arrays&lt;/h2&gt;
					&lt;p&gt;What does this have to do with arrays? When you declare an object in Ruby you&#39;re essentially telling the computer &quot;I need an object&#39;s worth of memory.&quot;  When you declare an array of a certain size you tell the computer you need that much memory plus &quot;I need the obejcts in this array to stay together.&quot;  Then the computer puts in extra work to make sure the array&#39;s variables stay together in memory.&lt;/p&gt;
					&lt;p&gt; When you ask the computer for array[index], what the computer does with that information is it takes the starting point for the array and adds the necessary distance to get the object you want. So array[index] tells the computer, give me the thing at: &lt;span class=&quot;code-block&quot;&gt;memory address = [array starting address] + [index] * [size of objects in ruby]&lt;/span class=&quot;code&quot;&gt; This is why arrays are indexed at 0. It makes the math for accessing elements simpler since the first item is at the array starting index. If the array were 1-index, using this math it would always get the item 1 larger than what you wanted.
					&lt;/p&gt;
					&lt;h2&gt;Hashes are a bit like arrays&lt;/h2&gt;
					&lt;p&gt;Accessing information in a hash, for the user, is similar to an array, you just put a key in the variable instead of an index, like so: hash[&quot;key&quot;]. If you wanted to access an array as you would a hash, you would have to search the contents of the array. For example, if I had a 100 x 2 array of first and last names and I wanted to find someone&#39;s name, if the array isn&#39;t ordered I would have to iterate through and check every single name until I found the right one. So how does the computer know where to find the information? Why can&#39;t it just include that functionality in arrays?&lt;/p&gt;

					&lt;h3&gt;Hash Functions&lt;/h3&gt;
					&lt;p&gt;Hashes, you might be interested to know, are essentially stored in arrays. Hashes use something called hash functions to turn a given string/symbol/variable into an integer. Some of these get very complicated, but a basic one works pretty much like the % function, it converts the given string to a value and then gets the remainder of that value divide by the size of the array that the hash is stored in. For (bad/cartoonish example), say that when I give my name the hash function returns the value 26. The array size is 20 so it stores the value associated with my name key at array index 6 (since 26%20 = 6).&lt;/p&gt;
					&lt;figure class=&#39;block&#39;&gt;
						&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/5/58/Hash_table_4_1_1_0_0_1_0_LL.svg/240px-Hash_table_4_1_1_0_0_1_0_LL.svg.png&quot; alt=&quot;Hash function diagram&quot;&gt;
						&lt;h6&gt;a hash function diagram from Wikepedia&lt;/h6&gt;
					&lt;/figure&gt;
					
					&lt;p&gt;A hash function&#39;s purpose is to essentially convert keys into array indices. This is difficult because keys can come in all different sorts of lengths and values and there&#39;s only a limited space to store them in. It is possible, for example, that if you put your name through the hash function, it would return 6, in which case both of our names would want to be stored at index 6. The hash data structure has to have a way to quickly handle all these sorts of issues. I&#39;m not clear enough on Ruby&#39;s implementation, but hashes can get complicated and there are all sorts of trade-offs between memory usage and clashes of these sorts.&lt;/p&gt;

					&lt;h2&gt;In Conclusion...&lt;/h2&gt;
					&lt;p&gt;...when you think about whether to use an array or a hash, you want to think about how you need to access your information. If your information is going to be sequential, your best bet is likely to use an array. If your information is going to be more scattershot, all over the place or have a lot of unique values, the hash is probably a better idea.&lt;/p&gt;
				&lt;/article&gt;
			&lt;/div&gt;
		&lt;/div&gt;
	&lt;/main&gt;
&lt;aside id=&quot;about-me&quot;&gt;
 &lt;div class=&quot;container&quot;&gt;
    &lt;figure id=&quot;me&quot;&gt;
      &lt;img src=&quot;/imgs/me.png&quot; alt=&quot;me&quot;&gt;
      &lt;h4&gt;Jack Abernethy&lt;/h4&gt;
    &lt;/figure&gt;
      &lt;ul id=&quot;links&quot;&gt;
        &lt;li&gt;&lt;p style=&quot;color:#e0e7e2&quot;&gt;My name is Jack and I&#39;m a fledgling Web Developer currently enrolled at Dev Bootcamp!&lt;/p&gt;&lt;/li&gt;
        &lt;li&gt;&lt;ul class=&quot;social-media&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/jabber_26&quot;&gt;&lt;img class=&quot;twitter&quot; src=&quot;/imgs/Twitter_white_logo.svg&quot; onmouseover=&quot;this.src=&#39;/imgs/Twitter_blue_logo.svg&#39;&quot; onmouseout=&quot;this.src=&#39;/imgs/Twitter_white_logo.svg&#39;&quot; alt=&quot;twitter&quot;&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/abernet2&quot;&gt;&lt;img src=&quot;/imgs/GitHub-Mark-Light.svg&quot; onmouseover=&quot;src=&#39;/imgs/GitHub-Mark.svg&#39;&quot; onmouseout=&quot;src=&#39;/imgs/GitHub-Mark-Light.svg&#39;&quot;&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@jackabernethy&quot;&gt;&lt;img src=&quot;/imgs/Medium-light.png&quot; onmouseover=&quot;src=&#39;/imgs/medium-m-color.png&#39;&quot; onmouseout=&quot;src=&#39;/imgs/medium-light.png&#39;&quot; alt=&quot;Medium&quot;&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.linkedin.com/in/jack-abernethy-ab257b9b&quot;&gt;&lt;img src=&quot;/imgs/In-White-34px-TM.png&quot; onmouseover=&quot;src=&#39;/imgs/In-2C-34px-R.png&#39;&quot; onmouseout=&quot;src=&#39;/imgs/In-White-34px-TM.png&#39;&quot;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
      &lt;/ul&gt;
 &lt;/div&gt;
&lt;/aside&gt;




</description>
        <pubDate>Fri, 13 Nov 2015 00:00:00 -0600</pubDate>
        <link>http://abernet2.github.io/2015/11/13/arrays-hashes.html</link>
        <guid isPermaLink="true">http://abernet2.github.io/2015/11/13/arrays-hashes.html</guid>
        
        
      </item>
    
      <item>
        <title>CSS Concepts Reflection</title>
        <description>&lt;main&gt;
	&lt;div class=&quot;container&quot;&gt;
		&lt;h4 id=&quot;date&quot;&gt;11.6.2015&lt;/h4&gt;	
		&lt;div id=&quot;blog-text&quot;&gt;
			&lt;section class=&quot;question&quot;&gt;
				&lt;h2&gt;What is the difference between margin, border, and padding?&lt;/h2&gt;
				&lt;figure class=&quot;in-right&quot;&gt;&lt;img src=&quot;../imgs/border-margin-padding.png&quot; alt=&quot;demonstration&quot;&gt;&lt;/figure&gt;
				&lt;h5&gt;Padding&lt;/h5&gt;
				&lt;p&gt;Spacing that occurs outside of your content. If you change the element&#39;s background, that will affect the padding area.&lt;/p&gt;
				&lt;h5&gt;Border&lt;/h5&gt;
				&lt;p&gt;The dividing line between padding space and margin. Borders are optional, they can have many different colors and styles.&lt;/p&gt;
				&lt;h5&gt;Margin&lt;/h5&gt;
				&lt;p&gt;Spacing that goes outside of your border. Will not be affected if you change the element&#39;s background. Can also have negative values for positioning purposes.&lt;/p&gt;
			&lt;/section&gt;
			
			&lt;section class=&quot;question&quot;&gt;
				&lt;h2&gt;What are the best practices associated with using classes vs. ids?&lt;/h2&gt;
				&lt;p&gt;The basic difference is that classes can occur multiple times, and ids can only occur once. There are several implications of this. IDs basically are used to identify unique objects so you can grab and edit something that is uniqe. &lt;a href=&quot;https://css-tricks.com/the-difference-between-id-and-class/&quot;&gt;CSS Tricks&lt;/a&gt; suggests thinking of classes as barcodes, and IDs as serial numbers.&lt;/p&gt;
				&lt;p&gt;Classes, on the other hand, are used to condense code so you don&#39;t have to repeat yourself. Objects can have multiple classes, classes can also be applied to multiple elements at the same time. You could, for instance, make an invisible class and add/subtract it from elements using Javascript to hide that object.&lt;/p&gt;
				&lt;p&gt;Bottome line, in CSS the difference between the two is entirely semantic (use &#39;.&#39; or &#39;#&#39;). Once we get to Javascript, the functionality really changes, and if you reuse and id the code will not pass an HTML validator, which is important.&lt;/p&gt;
			&lt;/section&gt;
			&lt;section class=&quot;question&quot;&gt;
				&lt;h2&gt;What are the differences between relative, absolute, fixed, and static positioning?&lt;/h2&gt;
				&lt;h5&gt;Static&lt;/h5&gt;
				&lt;p&gt;HTML elements by defaul have the static positioning element. The static feature places all objects flat on the page relative to other objects. This gives a flow to html elements so that two never, by default, occupy the same position.&lt;/p&gt;
				&lt;h5&gt;Relative&lt;/h5&gt;
				&lt;p&gt;Relative positioning, confusingly, places objects relative to &lt;span class=&quot;italics&quot;&gt;their defaul static positioning.&lt;/span&gt; This positioning allows you to treat the static position as a starting point and to use the left, right, top, bottom CSS to position your element around that starting point.&lt;/p&gt;
				&lt;h5&gt;Absolute&lt;/h5&gt;
				&lt;p&gt;Absolute positioning allows you to hard-wire the position of your element. Like the relative positioning, you can use left, right, etc to move your element, only the starting point is the parent element. When you use bottom with relative positioning, you move from the &lt;span class=&quot;italics&quot;&gt;relative bottom&lt;/span&gt;, but when you use the bottom attribute in absolute, you move relative to the bottom of the parent element.&lt;/p&gt;
				&lt;p&gt;Absolute gets this effect by taking your element out of the flow that we spoke of with static positioning. If you think of the page as a grid, absolute instead places your element at the (0,0) position of the first parent element that is not Relatively positioned or Absolutely positioned. In english: it makes it possible to place objects at the top or bottom of divs (or other elements) very easily.&lt;/p&gt;
				&lt;h5&gt;Fixed&lt;/h5&gt;
				&lt;p&gt;Maybe the easiest to understand, fixed positioning fixes an element relative to the screen, not the html page. Have you ever been to a website where the nav-bar stays in place no matter how far you scroll? Or a site that has a sidebar that doesn&#39;t react to scrolling? Those are fixed elements.&lt;/p&gt;
			&lt;/section&gt;
			&lt;section class=&quot;question&quot;&gt;
				&lt;h2&gt;What does it mean to display inline vs using inline block?&lt;/h2&gt;
				&lt;p&gt;When you use the inline display method, you tell the browser to get as much on one line as it can. Usually this means that it will put text and links on a line so that you can read from left to right and so it can adjust the words per line.&lt;/p&gt;
				&lt;p&gt;A drawback of the inline display method, is that you generally can&#39;t set height or width of that element. The element&#39;s size is always relative to its content. One way to fix this is to use display as a block. BUT, doing so will put your element on its own line.&lt;/p&gt;
				&lt;figure&gt;
					&lt;img src=&quot;../imgs/demo.PNG&quot; alt=&quot;demo&quot;&gt;
					&lt;p class=&quot;descriptor&quot;&gt;A quick demo of the difference. &lt;a href=&quot;http://dustwell.com/div-span-inline-block.html&quot;&gt;source&lt;/a&gt;&lt;/p&gt;
				&lt;/figure&gt;
				&lt;p&gt;Inline block utilizes the blockiness of block (setting you own size), and still positions your element in-line with text or other inline elements.&lt;/p&gt;
			&lt;/section&gt;
		&lt;/div&gt;
	&lt;/div&gt;
&lt;/main&gt;
&lt;aside id=&quot;about-me&quot;&gt;
 &lt;div class=&quot;container&quot;&gt;
    &lt;figure id=&quot;me&quot;&gt;
      &lt;img src=&quot;/imgs/me.png&quot; alt=&quot;me&quot;&gt;
      &lt;h4&gt;Jack Abernethy&lt;/h4&gt;
    &lt;/figure&gt;
      &lt;ul id=&quot;links&quot;&gt;
        &lt;li&gt;&lt;p style=&quot;color:#e0e7e2&quot;&gt;My name is Jack and I&#39;m a fledgling Web Developer currently enrolled at Dev Bootcamp!&lt;/p&gt;&lt;/li&gt;
        &lt;li&gt;&lt;ul class=&quot;social-media&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/jabber_26&quot;&gt;&lt;img class=&quot;twitter&quot; src=&quot;/imgs/Twitter_white_logo.svg&quot; onmouseover=&quot;this.src=&#39;/imgs/Twitter_blue_logo.svg&#39;&quot; onmouseout=&quot;this.src=&#39;/imgs/Twitter_white_logo.svg&#39;&quot; alt=&quot;twitter&quot;&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/abernet2&quot;&gt;&lt;img src=&quot;/imgs/GitHub-Mark-Light.svg&quot; onmouseover=&quot;src=&#39;/imgs/GitHub-Mark.svg&#39;&quot; onmouseout=&quot;src=&#39;/imgs/GitHub-Mark-Light.svg&#39;&quot;&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@jackabernethy&quot;&gt;&lt;img src=&quot;/imgs/Medium-light.png&quot; onmouseover=&quot;src=&#39;/imgs/medium-m-color.png&#39;&quot; onmouseout=&quot;src=&#39;/imgs/medium-light.png&#39;&quot; alt=&quot;Medium&quot;&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.linkedin.com/in/jack-abernethy-ab257b9b&quot;&gt;&lt;img src=&quot;/imgs/In-White-34px-TM.png&quot; onmouseover=&quot;src=&#39;/imgs/In-2C-34px-R.png&#39;&quot; onmouseout=&quot;src=&#39;/imgs/In-White-34px-TM.png&#39;&quot;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
      &lt;/ul&gt;
 &lt;/div&gt;
&lt;/aside&gt;



</description>
        <pubDate>Fri, 06 Nov 2015 00:00:00 -0600</pubDate>
        <link>http://abernet2.github.io/2015/11/06/css-concepts.html</link>
        <guid isPermaLink="true">http://abernet2.github.io/2015/11/06/css-concepts.html</guid>
        
        
      </item>
    
      <item>
        <title>Git, Github and Version Control</title>
        <description>&lt;main&gt;
  &lt;h1&gt;Git, GitHub and Version Control&lt;/h1&gt;
  &lt;h4&gt;10/21/15&lt;/h4&gt;

  &lt;section&gt;
    &lt;h3&gt;
        What are the benefits of version control?
    &lt;/h3&gt;
    &lt;p&gt; 
        Controlling versions helps to foster collaboration and maintain clean, progressive versions of your code. The basic idea is that you save versions of your code to a big bucket called a repository. There you can manage best feautures and figure out the most productive and best functioning bits of code. If you want to revert to an old version, Github keeps track of all your previous saves. You can also go back and see what changes have been made on a line by line level. All of that happens by managing and merging versions.
    &lt;/p&gt;
    &lt;p&gt;
        When you use version control, you make it easier to make big changes because going back becomes easy and reliable. You also allow a large group of people to work in parallel with minimal human work to cipher through conflicts and overlaps. You can also update your code with changes other people have made without losing your own code.
    &lt;/p&gt;
  &lt;/section&gt;
  &lt;section&gt;
    &lt;h3&gt;
        How does git help you keep track of changes?
    &lt;/h3&gt;
    &lt;p&gt; 
        Git helps you keep track of changes by giving you control over versions of your code. That may sound vague, but Git has a feauture called branches. Branches are sort of like when you save a file as file_v1 or file_v2, only better because Git is good and merging and updating files.
    &lt;/p&gt;
    &lt;p&gt;
        With branches each person editing a slice of code can make their own branch. They are free to do whatever they like with that branch, it&#39;s only when you try to merge back with the master copy that those changes affect other people.  
    &lt;/p&gt;
    &lt;p&gt;
        Every time you save to a branch in Git, you commit a version of your code to that branch. Git compares that commit to previous commits. Many people practice pulling and merging from the master branch before pushing their branch online. Doing so allows you see changes that other people have made and change your code accordingly. Git(hub) can show you line for line what has changed and can even point out some conflicts, so you can easily track other people&#39;s changes as well as your own.
    &lt;/p&gt;
  &lt;/section&gt;
  &lt;section&gt;
    &lt;h3&gt;
        Why use GitHub to store your code?
    &lt;/h3&gt;
    &lt;p&gt;
        Using Github is a good idea because it makes collaboration easy. It also helps keep your code accessible because it&#39;s online and can be found from any computer. Github allows you to see what you&#39;ve done in previous version, which can be nice if you mess something up or just need to pat yourself on the back.
    &lt;/p&gt;
  &lt;/section&gt;
&lt;/main&gt;

</description>
        <pubDate>Wed, 21 Oct 2015 00:00:00 -0500</pubDate>
        <link>http://abernet2.github.io/2015/10/21/git.html</link>
        <guid isPermaLink="true">http://abernet2.github.io/2015/10/21/git.html</guid>
        
        
      </item>
    
      <item>
        <title>Welcome to Jekyll!</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Tom&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &#39;Hi, Tom&#39; to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Tue, 20 Oct 2015 00:34:48 -0500</pubDate>
        <link>http://abernet2.github.io/jekyll/update/2015/10/20/welcome-to-jekyll.html</link>
        <guid isPermaLink="true">http://abernet2.github.io/jekyll/update/2015/10/20/welcome-to-jekyll.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
  </channel>
</rss>
